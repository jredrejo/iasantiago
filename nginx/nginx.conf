user www-data;
worker_processes auto;
pid /run/nginx.pid;

events {
  worker_connections 1024;
}




http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  types_hash_max_size 2048;

  # TLS
  server {
    listen 443 ssl http2;
    server_name iasantiago.santiagoapostol.net;

    access_log /opt/iasantiago-rag/nginx/access.log;
    error_log /opt/iasantiago-rag/nginx/error.log;

    ssl_certificate     /opt/iasantiago-rag/nginx/certs/server.crt;
    ssl_certificate_key /opt/iasantiago-rag/nginx/certs/server.key;
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_dhparam /opt/iasantiago-rag/nginx/dhparam.pem;

    # Autenticación con Google OIDC: cliente obtiene token y lo envía como Bearer.
    # Nginx valida vía auth_request al endpoint del rag-api.
    location = /_auth/callback {
      # callback para OpenWebUI OIDC (proxy directo a openwebui)
      proxy_pass http://127.0.0.1:8080/_auth/callback;
    }

    location / {
#      auth_request /_auth;  # valida token Google
#      proxy_set_header Authorization $http_authorization;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto https;
      proxy_pass http://127.0.0.1:8080/;  # Open WebUI dentro del contenedor (expuesto 8080 host)
    }

    location = /_auth {
      internal;
      proxy_pass http://127.0.0.1:8001/auth;  # rag-api en host:8001
      proxy_pass_request_body off;
      proxy_set_header Content-Length "";
      proxy_set_header Authorization $http_authorization;
    }

    location /docs/ {
        autoindex on;
        alias /opt/iasantiago-rag/topics/;
    }
  }

  server {
    listen 80;
    server_name _;
    return 301 https://$host$request_uri;
  }
}
